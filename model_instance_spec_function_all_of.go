/*
RIK

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the InstanceSpecFunctionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceSpecFunctionAllOf{}

// InstanceSpecFunctionAllOf struct for InstanceSpecFunctionAllOf
type InstanceSpecFunctionAllOf struct {
	Exposure *InstanceSpecFunctionAllOfExposure `json:"exposure,omitempty"`
}

// NewInstanceSpecFunctionAllOf instantiates a new InstanceSpecFunctionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceSpecFunctionAllOf() *InstanceSpecFunctionAllOf {
	this := InstanceSpecFunctionAllOf{}
	return &this
}

// NewInstanceSpecFunctionAllOfWithDefaults instantiates a new InstanceSpecFunctionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceSpecFunctionAllOfWithDefaults() *InstanceSpecFunctionAllOf {
	this := InstanceSpecFunctionAllOf{}
	return &this
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *InstanceSpecFunctionAllOf) GetExposure() InstanceSpecFunctionAllOfExposure {
	if o == nil || IsNil(o.Exposure) {
		var ret InstanceSpecFunctionAllOfExposure
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceSpecFunctionAllOf) GetExposureOk() (*InstanceSpecFunctionAllOfExposure, bool) {
	if o == nil || IsNil(o.Exposure) {
		return nil, false
	}
	return o.Exposure, true
}

// HasExposure returns a boolean if a field has been set.
func (o *InstanceSpecFunctionAllOf) HasExposure() bool {
	if o != nil && !IsNil(o.Exposure) {
		return true
	}

	return false
}

// SetExposure gets a reference to the given InstanceSpecFunctionAllOfExposure and assigns it to the Exposure field.
func (o *InstanceSpecFunctionAllOf) SetExposure(v InstanceSpecFunctionAllOfExposure) {
	o.Exposure = &v
}

func (o InstanceSpecFunctionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceSpecFunctionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exposure) {
		toSerialize["exposure"] = o.Exposure
	}
	return toSerialize, nil
}

type NullableInstanceSpecFunctionAllOf struct {
	value *InstanceSpecFunctionAllOf
	isSet bool
}

func (v NullableInstanceSpecFunctionAllOf) Get() *InstanceSpecFunctionAllOf {
	return v.value
}

func (v *NullableInstanceSpecFunctionAllOf) Set(val *InstanceSpecFunctionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceSpecFunctionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceSpecFunctionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceSpecFunctionAllOf(val *InstanceSpecFunctionAllOf) *NullableInstanceSpecFunctionAllOf {
	return &NullableInstanceSpecFunctionAllOf{value: val, isSet: true}
}

func (v NullableInstanceSpecFunctionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceSpecFunctionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


