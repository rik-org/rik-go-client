/*
RIK API

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the WorkloadDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadDefinition{}

// WorkloadDefinition struct for WorkloadDefinition
type WorkloadDefinition struct {
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Determine the kind of object you want to create
	Kind *string `json:"kind,omitempty"`
	Name *string `json:"name,omitempty"`
	Spec *WorkloadDefinitionSpec `json:"spec,omitempty"`
}

// NewWorkloadDefinition instantiates a new WorkloadDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadDefinition() *WorkloadDefinition {
	this := WorkloadDefinition{}
	return &this
}

// NewWorkloadDefinitionWithDefaults instantiates a new WorkloadDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadDefinitionWithDefaults() *WorkloadDefinition {
	this := WorkloadDefinition{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *WorkloadDefinition) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDefinition) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *WorkloadDefinition) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *WorkloadDefinition) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *WorkloadDefinition) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDefinition) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *WorkloadDefinition) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *WorkloadDefinition) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkloadDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkloadDefinition) SetName(v string) {
	o.Name = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *WorkloadDefinition) GetSpec() WorkloadDefinitionSpec {
	if o == nil || IsNil(o.Spec) {
		var ret WorkloadDefinitionSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadDefinition) GetSpecOk() (*WorkloadDefinitionSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *WorkloadDefinition) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given WorkloadDefinitionSpec and assigns it to the Spec field.
func (o *WorkloadDefinition) SetSpec(v WorkloadDefinitionSpec) {
	o.Spec = &v
}

func (o WorkloadDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullableWorkloadDefinition struct {
	value *WorkloadDefinition
	isSet bool
}

func (v NullableWorkloadDefinition) Get() *WorkloadDefinition {
	return v.value
}

func (v *NullableWorkloadDefinition) Set(val *WorkloadDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadDefinition(val *WorkloadDefinition) *NullableWorkloadDefinition {
	return &NullableWorkloadDefinition{value: val, isSet: true}
}

func (v NullableWorkloadDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


