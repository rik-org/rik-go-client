/*
RIK API

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the WorkloadMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadMeta{}

// WorkloadMeta struct for WorkloadMeta
type WorkloadMeta struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Value *Workload `json:"value,omitempty"`
}

// NewWorkloadMeta instantiates a new WorkloadMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadMeta() *WorkloadMeta {
	this := WorkloadMeta{}
	return &this
}

// NewWorkloadMetaWithDefaults instantiates a new WorkloadMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadMetaWithDefaults() *WorkloadMeta {
	this := WorkloadMeta{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkloadMeta) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMeta) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkloadMeta) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkloadMeta) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkloadMeta) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMeta) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadMeta) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkloadMeta) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *WorkloadMeta) GetValue() Workload {
	if o == nil || IsNil(o.Value) {
		var ret Workload
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadMeta) GetValueOk() (*Workload, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *WorkloadMeta) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given Workload and assigns it to the Value field.
func (o *WorkloadMeta) SetValue(v Workload) {
	o.Value = &v
}

func (o WorkloadMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableWorkloadMeta struct {
	value *WorkloadMeta
	isSet bool
}

func (v NullableWorkloadMeta) Get() *WorkloadMeta {
	return v.value
}

func (v *NullableWorkloadMeta) Set(val *WorkloadMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadMeta(val *WorkloadMeta) *NullableWorkloadMeta {
	return &NullableWorkloadMeta{value: val, isSet: true}
}

func (v NullableWorkloadMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


