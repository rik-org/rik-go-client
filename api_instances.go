/*
RIK API

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type InstancesApi interface {

	/*
	ApiV0InstancesCreatePost Method for ApiV0InstancesCreatePost

	Create a new instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstancesApiApiV0InstancesCreatePostRequest
	*/
	ApiV0InstancesCreatePost(ctx context.Context) InstancesApiApiV0InstancesCreatePostRequest

	// ApiV0InstancesCreatePostExecute executes the request
	ApiV0InstancesCreatePostExecute(r InstancesApiApiV0InstancesCreatePostRequest) (*http.Response, error)

	/*
	ApiV0InstancesDeletePost Method for ApiV0InstancesDeletePost

	Delete an instance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstancesApiApiV0InstancesDeletePostRequest
	*/
	ApiV0InstancesDeletePost(ctx context.Context) InstancesApiApiV0InstancesDeletePostRequest

	// ApiV0InstancesDeletePostExecute executes the request
	ApiV0InstancesDeletePostExecute(r InstancesApiApiV0InstancesDeletePostRequest) (*http.Response, error)

	/*
	ApiV0InstancesListGet Method for ApiV0InstancesListGet

	List all instances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return InstancesApiApiV0InstancesListGetRequest
	*/
	ApiV0InstancesListGet(ctx context.Context) InstancesApiApiV0InstancesListGetRequest

	// ApiV0InstancesListGetExecute executes the request
	//  @return ApiV0WorkloadsInstancesWorkloadIdGet200Response
	ApiV0InstancesListGetExecute(r InstancesApiApiV0InstancesListGetRequest) (*ApiV0WorkloadsInstancesWorkloadIdGet200Response, *http.Response, error)

	/*
	ApiV0WorkloadsInstancesWorkloadIdGet Get instances of a workload

	Get instances of a workload

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param workloadId
	@return InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest
	*/
	ApiV0WorkloadsInstancesWorkloadIdGet(ctx context.Context, workloadId string) InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest

	// ApiV0WorkloadsInstancesWorkloadIdGetExecute executes the request
	//  @return ApiV0WorkloadsInstancesWorkloadIdGet200Response
	ApiV0WorkloadsInstancesWorkloadIdGetExecute(r InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest) (*ApiV0WorkloadsInstancesWorkloadIdGet200Response, *http.Response, error)
}

// InstancesApiService InstancesApi service
type InstancesApiService service

type InstancesApiApiV0InstancesCreatePostRequest struct {
	ctx context.Context
	ApiService InstancesApi
	instanceDefinition *InstanceDefinition
}

func (r InstancesApiApiV0InstancesCreatePostRequest) InstanceDefinition(instanceDefinition InstanceDefinition) InstancesApiApiV0InstancesCreatePostRequest {
	r.instanceDefinition = &instanceDefinition
	return r
}

func (r InstancesApiApiV0InstancesCreatePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV0InstancesCreatePostExecute(r)
}

/*
ApiV0InstancesCreatePost Method for ApiV0InstancesCreatePost

Create a new instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstancesApiApiV0InstancesCreatePostRequest
*/
func (a *InstancesApiService) ApiV0InstancesCreatePost(ctx context.Context) InstancesApiApiV0InstancesCreatePostRequest {
	return InstancesApiApiV0InstancesCreatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InstancesApiService) ApiV0InstancesCreatePostExecute(r InstancesApiApiV0InstancesCreatePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstancesApiService.ApiV0InstancesCreatePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/instances.create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.instanceDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type InstancesApiApiV0InstancesDeletePostRequest struct {
	ctx context.Context
	ApiService InstancesApi
	apiV0InstancesDeletePostRequest *ApiV0InstancesDeletePostRequest
}

func (r InstancesApiApiV0InstancesDeletePostRequest) ApiV0InstancesDeletePostRequest(apiV0InstancesDeletePostRequest ApiV0InstancesDeletePostRequest) InstancesApiApiV0InstancesDeletePostRequest {
	r.apiV0InstancesDeletePostRequest = &apiV0InstancesDeletePostRequest
	return r
}

func (r InstancesApiApiV0InstancesDeletePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV0InstancesDeletePostExecute(r)
}

/*
ApiV0InstancesDeletePost Method for ApiV0InstancesDeletePost

Delete an instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstancesApiApiV0InstancesDeletePostRequest
*/
func (a *InstancesApiService) ApiV0InstancesDeletePost(ctx context.Context) InstancesApiApiV0InstancesDeletePostRequest {
	return InstancesApiApiV0InstancesDeletePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InstancesApiService) ApiV0InstancesDeletePostExecute(r InstancesApiApiV0InstancesDeletePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstancesApiService.ApiV0InstancesDeletePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/instances.delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apiV0InstancesDeletePostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type InstancesApiApiV0InstancesListGetRequest struct {
	ctx context.Context
	ApiService InstancesApi
}

func (r InstancesApiApiV0InstancesListGetRequest) Execute() (*ApiV0WorkloadsInstancesWorkloadIdGet200Response, *http.Response, error) {
	return r.ApiService.ApiV0InstancesListGetExecute(r)
}

/*
ApiV0InstancesListGet Method for ApiV0InstancesListGet

List all instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstancesApiApiV0InstancesListGetRequest
*/
func (a *InstancesApiService) ApiV0InstancesListGet(ctx context.Context) InstancesApiApiV0InstancesListGetRequest {
	return InstancesApiApiV0InstancesListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiV0WorkloadsInstancesWorkloadIdGet200Response
func (a *InstancesApiService) ApiV0InstancesListGetExecute(r InstancesApiApiV0InstancesListGetRequest) (*ApiV0WorkloadsInstancesWorkloadIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiV0WorkloadsInstancesWorkloadIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstancesApiService.ApiV0InstancesListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/instances.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest struct {
	ctx context.Context
	ApiService InstancesApi
	workloadId string
}

func (r InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest) Execute() (*ApiV0WorkloadsInstancesWorkloadIdGet200Response, *http.Response, error) {
	return r.ApiService.ApiV0WorkloadsInstancesWorkloadIdGetExecute(r)
}

/*
ApiV0WorkloadsInstancesWorkloadIdGet Get instances of a workload

Get instances of a workload

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workloadId
 @return InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest
*/
func (a *InstancesApiService) ApiV0WorkloadsInstancesWorkloadIdGet(ctx context.Context, workloadId string) InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest {
	return InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest{
		ApiService: a,
		ctx: ctx,
		workloadId: workloadId,
	}
}

// Execute executes the request
//  @return ApiV0WorkloadsInstancesWorkloadIdGet200Response
func (a *InstancesApiService) ApiV0WorkloadsInstancesWorkloadIdGetExecute(r InstancesApiApiV0WorkloadsInstancesWorkloadIdGetRequest) (*ApiV0WorkloadsInstancesWorkloadIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiV0WorkloadsInstancesWorkloadIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstancesApiService.ApiV0WorkloadsInstancesWorkloadIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/workloads.instances/{workloadId}"
	localVarPath = strings.Replace(localVarPath, "{"+"workloadId"+"}", url.PathEscape(parameterValueToString(r.workloadId, "workloadId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
