/*
RIK API

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type WorkloadsApi interface {

	/*
	CreateWorkload Create a new workload

	Create a new workload

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WorkloadsApiCreateWorkloadRequest
	*/
	CreateWorkload(ctx context.Context) WorkloadsApiCreateWorkloadRequest

	// CreateWorkloadExecute executes the request
	//  @return WorkloadName
	CreateWorkloadExecute(r WorkloadsApiCreateWorkloadRequest) (*WorkloadName, *http.Response, error)

	/*
	DeleteWorkload Method for DeleteWorkload

	Delete a workload

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WorkloadsApiDeleteWorkloadRequest
	*/
	DeleteWorkload(ctx context.Context) WorkloadsApiDeleteWorkloadRequest

	// DeleteWorkloadExecute executes the request
	DeleteWorkloadExecute(r WorkloadsApiDeleteWorkloadRequest) (*http.Response, error)

	/*
	GetWorkloadInstances Get all the instances for the given workload

	Retrieve the list of instances for the given workload.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param workloadId
	@return WorkloadsApiGetWorkloadInstancesRequest
	*/
	GetWorkloadInstances(ctx context.Context, workloadId string) WorkloadsApiGetWorkloadInstancesRequest

	// GetWorkloadInstancesExecute executes the request
	//  @return GetWorkloadInstances200Response
	GetWorkloadInstancesExecute(r WorkloadsApiGetWorkloadInstancesRequest) (*GetWorkloadInstances200Response, *http.Response, error)

	/*
	GetWorkloads List all the workloads available in the cluster

	Retrieve a list of all the active workloads in the cluster.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WorkloadsApiGetWorkloadsRequest
	*/
	GetWorkloads(ctx context.Context) WorkloadsApiGetWorkloadsRequest

	// GetWorkloadsExecute executes the request
	//  @return []WorkloadMeta
	GetWorkloadsExecute(r WorkloadsApiGetWorkloadsRequest) ([]WorkloadMeta, *http.Response, error)
}

// WorkloadsApiService WorkloadsApi service
type WorkloadsApiService service

type WorkloadsApiCreateWorkloadRequest struct {
	ctx context.Context
	ApiService WorkloadsApi
	workload *Workload
}

func (r WorkloadsApiCreateWorkloadRequest) Workload(workload Workload) WorkloadsApiCreateWorkloadRequest {
	r.workload = &workload
	return r
}

func (r WorkloadsApiCreateWorkloadRequest) Execute() (*WorkloadName, *http.Response, error) {
	return r.ApiService.CreateWorkloadExecute(r)
}

/*
CreateWorkload Create a new workload

Create a new workload

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WorkloadsApiCreateWorkloadRequest
*/
func (a *WorkloadsApiService) CreateWorkload(ctx context.Context) WorkloadsApiCreateWorkloadRequest {
	return WorkloadsApiCreateWorkloadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkloadName
func (a *WorkloadsApiService) CreateWorkloadExecute(r WorkloadsApiCreateWorkloadRequest) (*WorkloadName, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkloadName
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadsApiService.CreateWorkload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/workloads.create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workload
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkloadsApiDeleteWorkloadRequest struct {
	ctx context.Context
	ApiService WorkloadsApi
	workloadName *WorkloadName
}

func (r WorkloadsApiDeleteWorkloadRequest) WorkloadName(workloadName WorkloadName) WorkloadsApiDeleteWorkloadRequest {
	r.workloadName = &workloadName
	return r
}

func (r WorkloadsApiDeleteWorkloadRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteWorkloadExecute(r)
}

/*
DeleteWorkload Method for DeleteWorkload

Delete a workload

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WorkloadsApiDeleteWorkloadRequest
*/
func (a *WorkloadsApiService) DeleteWorkload(ctx context.Context) WorkloadsApiDeleteWorkloadRequest {
	return WorkloadsApiDeleteWorkloadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WorkloadsApiService) DeleteWorkloadExecute(r WorkloadsApiDeleteWorkloadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadsApiService.DeleteWorkload")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/workloads.delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workloadName
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WorkloadsApiGetWorkloadInstancesRequest struct {
	ctx context.Context
	ApiService WorkloadsApi
	workloadId string
}

func (r WorkloadsApiGetWorkloadInstancesRequest) Execute() (*GetWorkloadInstances200Response, *http.Response, error) {
	return r.ApiService.GetWorkloadInstancesExecute(r)
}

/*
GetWorkloadInstances Get all the instances for the given workload

Retrieve the list of instances for the given workload.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workloadId
 @return WorkloadsApiGetWorkloadInstancesRequest
*/
func (a *WorkloadsApiService) GetWorkloadInstances(ctx context.Context, workloadId string) WorkloadsApiGetWorkloadInstancesRequest {
	return WorkloadsApiGetWorkloadInstancesRequest{
		ApiService: a,
		ctx: ctx,
		workloadId: workloadId,
	}
}

// Execute executes the request
//  @return GetWorkloadInstances200Response
func (a *WorkloadsApiService) GetWorkloadInstancesExecute(r WorkloadsApiGetWorkloadInstancesRequest) (*GetWorkloadInstances200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetWorkloadInstances200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadsApiService.GetWorkloadInstances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/workloads.instances/{workloadId}"
	localVarPath = strings.Replace(localVarPath, "{"+"workloadId"+"}", url.PathEscape(parameterValueToString(r.workloadId, "workloadId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkloadsApiGetWorkloadsRequest struct {
	ctx context.Context
	ApiService WorkloadsApi
}

func (r WorkloadsApiGetWorkloadsRequest) Execute() ([]WorkloadMeta, *http.Response, error) {
	return r.ApiService.GetWorkloadsExecute(r)
}

/*
GetWorkloads List all the workloads available in the cluster

Retrieve a list of all the active workloads in the cluster.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WorkloadsApiGetWorkloadsRequest
*/
func (a *WorkloadsApiService) GetWorkloads(ctx context.Context) WorkloadsApiGetWorkloadsRequest {
	return WorkloadsApiGetWorkloadsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkloadMeta
func (a *WorkloadsApiService) GetWorkloadsExecute(r WorkloadsApiGetWorkloadsRequest) ([]WorkloadMeta, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkloadMeta
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadsApiService.GetWorkloads")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/workloads.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
