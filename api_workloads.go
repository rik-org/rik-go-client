/*
RIK API

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type WorkloadsApi interface {

	/*
	ApiV0WorkloadsCreatePost Method for ApiV0WorkloadsCreatePost

	Create a new workload

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WorkloadsApiApiV0WorkloadsCreatePostRequest
	*/
	ApiV0WorkloadsCreatePost(ctx context.Context) WorkloadsApiApiV0WorkloadsCreatePostRequest

	// ApiV0WorkloadsCreatePostExecute executes the request
	//  @return WorkloadName
	ApiV0WorkloadsCreatePostExecute(r WorkloadsApiApiV0WorkloadsCreatePostRequest) (*WorkloadName, *http.Response, error)

	/*
	ApiV0WorkloadsDeletePost Method for ApiV0WorkloadsDeletePost

	Delete a workload

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WorkloadsApiApiV0WorkloadsDeletePostRequest
	*/
	ApiV0WorkloadsDeletePost(ctx context.Context) WorkloadsApiApiV0WorkloadsDeletePostRequest

	// ApiV0WorkloadsDeletePostExecute executes the request
	ApiV0WorkloadsDeletePostExecute(r WorkloadsApiApiV0WorkloadsDeletePostRequest) (*http.Response, error)

	/*
	ApiV0WorkloadsListGet Method for ApiV0WorkloadsListGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return WorkloadsApiApiV0WorkloadsListGetRequest
	*/
	ApiV0WorkloadsListGet(ctx context.Context) WorkloadsApiApiV0WorkloadsListGetRequest

	// ApiV0WorkloadsListGetExecute executes the request
	//  @return []Workload
	ApiV0WorkloadsListGetExecute(r WorkloadsApiApiV0WorkloadsListGetRequest) ([]Workload, *http.Response, error)
}

// WorkloadsApiService WorkloadsApi service
type WorkloadsApiService service

type WorkloadsApiApiV0WorkloadsCreatePostRequest struct {
	ctx context.Context
	ApiService WorkloadsApi
	workloadDefinition *WorkloadDefinition
}

func (r WorkloadsApiApiV0WorkloadsCreatePostRequest) WorkloadDefinition(workloadDefinition WorkloadDefinition) WorkloadsApiApiV0WorkloadsCreatePostRequest {
	r.workloadDefinition = &workloadDefinition
	return r
}

func (r WorkloadsApiApiV0WorkloadsCreatePostRequest) Execute() (*WorkloadName, *http.Response, error) {
	return r.ApiService.ApiV0WorkloadsCreatePostExecute(r)
}

/*
ApiV0WorkloadsCreatePost Method for ApiV0WorkloadsCreatePost

Create a new workload

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WorkloadsApiApiV0WorkloadsCreatePostRequest
*/
func (a *WorkloadsApiService) ApiV0WorkloadsCreatePost(ctx context.Context) WorkloadsApiApiV0WorkloadsCreatePostRequest {
	return WorkloadsApiApiV0WorkloadsCreatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkloadName
func (a *WorkloadsApiService) ApiV0WorkloadsCreatePostExecute(r WorkloadsApiApiV0WorkloadsCreatePostRequest) (*WorkloadName, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkloadName
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadsApiService.ApiV0WorkloadsCreatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/workloads.create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workloadDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkloadsApiApiV0WorkloadsDeletePostRequest struct {
	ctx context.Context
	ApiService WorkloadsApi
	workloadName *WorkloadName
}

func (r WorkloadsApiApiV0WorkloadsDeletePostRequest) WorkloadName(workloadName WorkloadName) WorkloadsApiApiV0WorkloadsDeletePostRequest {
	r.workloadName = &workloadName
	return r
}

func (r WorkloadsApiApiV0WorkloadsDeletePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV0WorkloadsDeletePostExecute(r)
}

/*
ApiV0WorkloadsDeletePost Method for ApiV0WorkloadsDeletePost

Delete a workload

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WorkloadsApiApiV0WorkloadsDeletePostRequest
*/
func (a *WorkloadsApiService) ApiV0WorkloadsDeletePost(ctx context.Context) WorkloadsApiApiV0WorkloadsDeletePostRequest {
	return WorkloadsApiApiV0WorkloadsDeletePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *WorkloadsApiService) ApiV0WorkloadsDeletePostExecute(r WorkloadsApiApiV0WorkloadsDeletePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadsApiService.ApiV0WorkloadsDeletePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/workloads.delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workloadName
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type WorkloadsApiApiV0WorkloadsListGetRequest struct {
	ctx context.Context
	ApiService WorkloadsApi
}

func (r WorkloadsApiApiV0WorkloadsListGetRequest) Execute() ([]Workload, *http.Response, error) {
	return r.ApiService.ApiV0WorkloadsListGetExecute(r)
}

/*
ApiV0WorkloadsListGet Method for ApiV0WorkloadsListGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return WorkloadsApiApiV0WorkloadsListGetRequest
*/
func (a *WorkloadsApiService) ApiV0WorkloadsListGet(ctx context.Context) WorkloadsApiApiV0WorkloadsListGetRequest {
	return WorkloadsApiApiV0WorkloadsListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Workload
func (a *WorkloadsApiService) ApiV0WorkloadsListGetExecute(r WorkloadsApiApiV0WorkloadsListGetRequest) ([]Workload, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Workload
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadsApiService.ApiV0WorkloadsListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v0/workloads.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
