/*
RIK

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the InstanceSpecFunctionAllOfExposure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstanceSpecFunctionAllOfExposure{}

// InstanceSpecFunctionAllOfExposure struct for InstanceSpecFunctionAllOfExposure
type InstanceSpecFunctionAllOfExposure struct {
	Port *int32 `json:"port,omitempty"`
	TargetPort *int32 `json:"targetPort,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewInstanceSpecFunctionAllOfExposure instantiates a new InstanceSpecFunctionAllOfExposure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstanceSpecFunctionAllOfExposure() *InstanceSpecFunctionAllOfExposure {
	this := InstanceSpecFunctionAllOfExposure{}
	return &this
}

// NewInstanceSpecFunctionAllOfExposureWithDefaults instantiates a new InstanceSpecFunctionAllOfExposure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstanceSpecFunctionAllOfExposureWithDefaults() *InstanceSpecFunctionAllOfExposure {
	this := InstanceSpecFunctionAllOfExposure{}
	return &this
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *InstanceSpecFunctionAllOfExposure) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceSpecFunctionAllOfExposure) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *InstanceSpecFunctionAllOfExposure) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *InstanceSpecFunctionAllOfExposure) SetPort(v int32) {
	o.Port = &v
}

// GetTargetPort returns the TargetPort field value if set, zero value otherwise.
func (o *InstanceSpecFunctionAllOfExposure) GetTargetPort() int32 {
	if o == nil || IsNil(o.TargetPort) {
		var ret int32
		return ret
	}
	return *o.TargetPort
}

// GetTargetPortOk returns a tuple with the TargetPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceSpecFunctionAllOfExposure) GetTargetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.TargetPort) {
		return nil, false
	}
	return o.TargetPort, true
}

// HasTargetPort returns a boolean if a field has been set.
func (o *InstanceSpecFunctionAllOfExposure) HasTargetPort() bool {
	if o != nil && !IsNil(o.TargetPort) {
		return true
	}

	return false
}

// SetTargetPort gets a reference to the given int32 and assigns it to the TargetPort field.
func (o *InstanceSpecFunctionAllOfExposure) SetTargetPort(v int32) {
	o.TargetPort = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InstanceSpecFunctionAllOfExposure) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstanceSpecFunctionAllOfExposure) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InstanceSpecFunctionAllOfExposure) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InstanceSpecFunctionAllOfExposure) SetType(v string) {
	o.Type = &v
}

func (o InstanceSpecFunctionAllOfExposure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstanceSpecFunctionAllOfExposure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.TargetPort) {
		toSerialize["targetPort"] = o.TargetPort
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableInstanceSpecFunctionAllOfExposure struct {
	value *InstanceSpecFunctionAllOfExposure
	isSet bool
}

func (v NullableInstanceSpecFunctionAllOfExposure) Get() *InstanceSpecFunctionAllOfExposure {
	return v.value
}

func (v *NullableInstanceSpecFunctionAllOfExposure) Set(val *InstanceSpecFunctionAllOfExposure) {
	v.value = val
	v.isSet = true
}

func (v NullableInstanceSpecFunctionAllOfExposure) IsSet() bool {
	return v.isSet
}

func (v *NullableInstanceSpecFunctionAllOfExposure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstanceSpecFunctionAllOfExposure(val *InstanceSpecFunctionAllOfExposure) *NullableInstanceSpecFunctionAllOfExposure {
	return &NullableInstanceSpecFunctionAllOfExposure{value: val, isSet: true}
}

func (v NullableInstanceSpecFunctionAllOfExposure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstanceSpecFunctionAllOfExposure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


