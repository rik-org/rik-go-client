/*
RIK API

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FunctionWorkload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionWorkload{}

// FunctionWorkload A definition for a Function, no network is required as it's handled by the underlying platform
type FunctionWorkload struct {
	Function *FunctionWorkloadFunction `json:"function,omitempty"`
}

// NewFunctionWorkload instantiates a new FunctionWorkload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionWorkload() *FunctionWorkload {
	this := FunctionWorkload{}
	return &this
}

// NewFunctionWorkloadWithDefaults instantiates a new FunctionWorkload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionWorkloadWithDefaults() *FunctionWorkload {
	this := FunctionWorkload{}
	return &this
}

// GetFunction returns the Function field value if set, zero value otherwise.
func (o *FunctionWorkload) GetFunction() FunctionWorkloadFunction {
	if o == nil || IsNil(o.Function) {
		var ret FunctionWorkloadFunction
		return ret
	}
	return *o.Function
}

// GetFunctionOk returns a tuple with the Function field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionWorkload) GetFunctionOk() (*FunctionWorkloadFunction, bool) {
	if o == nil || IsNil(o.Function) {
		return nil, false
	}
	return o.Function, true
}

// HasFunction returns a boolean if a field has been set.
func (o *FunctionWorkload) HasFunction() bool {
	if o != nil && !IsNil(o.Function) {
		return true
	}

	return false
}

// SetFunction gets a reference to the given FunctionWorkloadFunction and assigns it to the Function field.
func (o *FunctionWorkload) SetFunction(v FunctionWorkloadFunction) {
	o.Function = &v
}

func (o FunctionWorkload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionWorkload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Function) {
		toSerialize["function"] = o.Function
	}
	return toSerialize, nil
}

type NullableFunctionWorkload struct {
	value *FunctionWorkload
	isSet bool
}

func (v NullableFunctionWorkload) Get() *FunctionWorkload {
	return v.value
}

func (v *NullableFunctionWorkload) Set(val *FunctionWorkload) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionWorkload(val *FunctionWorkload) *NullableFunctionWorkload {
	return &NullableFunctionWorkload{value: val, isSet: true}
}

func (v NullableFunctionWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


