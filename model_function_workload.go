/*
RIK API

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the FunctionWorkload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionWorkload{}

// FunctionWorkload A definition for a Function, no network is required as it's handled by the underlying platform
type FunctionWorkload struct {
	Execution *FunctionWorkloadExecution `json:"execution,omitempty"`
	Exposure *FunctionWorkloadExposure `json:"exposure,omitempty"`
}

// NewFunctionWorkload instantiates a new FunctionWorkload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionWorkload() *FunctionWorkload {
	this := FunctionWorkload{}
	return &this
}

// NewFunctionWorkloadWithDefaults instantiates a new FunctionWorkload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionWorkloadWithDefaults() *FunctionWorkload {
	this := FunctionWorkload{}
	return &this
}

// GetExecution returns the Execution field value if set, zero value otherwise.
func (o *FunctionWorkload) GetExecution() FunctionWorkloadExecution {
	if o == nil || IsNil(o.Execution) {
		var ret FunctionWorkloadExecution
		return ret
	}
	return *o.Execution
}

// GetExecutionOk returns a tuple with the Execution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionWorkload) GetExecutionOk() (*FunctionWorkloadExecution, bool) {
	if o == nil || IsNil(o.Execution) {
		return nil, false
	}
	return o.Execution, true
}

// HasExecution returns a boolean if a field has been set.
func (o *FunctionWorkload) HasExecution() bool {
	if o != nil && !IsNil(o.Execution) {
		return true
	}

	return false
}

// SetExecution gets a reference to the given FunctionWorkloadExecution and assigns it to the Execution field.
func (o *FunctionWorkload) SetExecution(v FunctionWorkloadExecution) {
	o.Execution = &v
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *FunctionWorkload) GetExposure() FunctionWorkloadExposure {
	if o == nil || IsNil(o.Exposure) {
		var ret FunctionWorkloadExposure
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionWorkload) GetExposureOk() (*FunctionWorkloadExposure, bool) {
	if o == nil || IsNil(o.Exposure) {
		return nil, false
	}
	return o.Exposure, true
}

// HasExposure returns a boolean if a field has been set.
func (o *FunctionWorkload) HasExposure() bool {
	if o != nil && !IsNil(o.Exposure) {
		return true
	}

	return false
}

// SetExposure gets a reference to the given FunctionWorkloadExposure and assigns it to the Exposure field.
func (o *FunctionWorkload) SetExposure(v FunctionWorkloadExposure) {
	o.Exposure = &v
}

func (o FunctionWorkload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionWorkload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Execution) {
		toSerialize["execution"] = o.Execution
	}
	if !IsNil(o.Exposure) {
		toSerialize["exposure"] = o.Exposure
	}
	return toSerialize, nil
}

type NullableFunctionWorkload struct {
	value *FunctionWorkload
	isSet bool
}

func (v NullableFunctionWorkload) Get() *FunctionWorkload {
	return v.value
}

func (v *NullableFunctionWorkload) Set(val *FunctionWorkload) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionWorkload(val *FunctionWorkload) *NullableFunctionWorkload {
	return &NullableFunctionWorkload{value: val, isSet: true}
}

func (v NullableFunctionWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


