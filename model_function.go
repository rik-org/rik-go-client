/*
RIK

RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. 

API version: 0.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Function type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Function{}

// Function The specification to define a function inside a workload.
type Function struct {
	Execution *FunctionExecution `json:"execution,omitempty"`
}

// NewFunction instantiates a new Function object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunction() *Function {
	this := Function{}
	return &this
}

// NewFunctionWithDefaults instantiates a new Function object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionWithDefaults() *Function {
	this := Function{}
	return &this
}

// GetExecution returns the Execution field value if set, zero value otherwise.
func (o *Function) GetExecution() FunctionExecution {
	if o == nil || IsNil(o.Execution) {
		var ret FunctionExecution
		return ret
	}
	return *o.Execution
}

// GetExecutionOk returns a tuple with the Execution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Function) GetExecutionOk() (*FunctionExecution, bool) {
	if o == nil || IsNil(o.Execution) {
		return nil, false
	}
	return o.Execution, true
}

// HasExecution returns a boolean if a field has been set.
func (o *Function) HasExecution() bool {
	if o != nil && !IsNil(o.Execution) {
		return true
	}

	return false
}

// SetExecution gets a reference to the given FunctionExecution and assigns it to the Execution field.
func (o *Function) SetExecution(v FunctionExecution) {
	o.Execution = &v
}

func (o Function) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Function) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Execution) {
		toSerialize["execution"] = o.Execution
	}
	return toSerialize, nil
}

type NullableFunction struct {
	value *Function
	isSet bool
}

func (v NullableFunction) Get() *Function {
	return v.value
}

func (v *NullableFunction) Set(val *Function) {
	v.value = val
	v.isSet = true
}

func (v NullableFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunction(val *Function) *NullableFunction {
	return &NullableFunction{value: val, isSet: true}
}

func (v NullableFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


